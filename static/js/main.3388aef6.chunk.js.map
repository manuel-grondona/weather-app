{"version":3,"sources":["icons/Arrow.tsx","hooks.ts","constants/days.ts","constants/months.ts","api/api.ts","features/weatherSlice.ts","utils.ts","mediaQuery.ts","components/WeatherCard/WeatherCard.tsx","features/DailyWeatherList/DailyWeatherList.tsx","features/UnitCheckbox/UnitCheckbox.tsx","components/TemperatureBars/Rect.tsx","components/TemperatureBars/XAxis.tsx","components/TemperatureBars/TemperatureBars.tsx","features/HourlyWeatherChart/HourlyWeatherChart.tsx","App.tsx","reportWebVitals.ts","store.ts","index.tsx"],"names":["Arrow","props","width","height","viewBox","fill","xmlns","d","useAppDispatch","useDispatch","useAppSelector","useSelector","days","months","APPID","fetchDailyForecast","a","lat","lon","fetch","response","json","data","fetchFiveDaysForecast","fetchWeather","createAsyncThunk","api","hourly","city","coord","daily","weatherSlice","createSlice","name","initialState","loading","unit","list","selectedDayDate","selectedDayHours","reducers","changeUnit","state","action","payload","selectDay","selectedDate","Date","foundDate","filter","day","dt","getDate","extraReducers","builder","addCase","pending","fulfilled","firstDay","HoursFirstDay","rejected","actions","fahrenheitToCelsius","fahrenheit","BREAKPOINTS","mediaQuery","desktop","mediaQueryJS","window","matchMedia","useMediaQuery","useState","matches","isMobile","setIsMobile","innerWidth","innerHeight","screenSize","setScreenSize","useEffect","handleChange","e","addEventListener","removeEventListener","WeatherCard","temp","date","weather","selected","dispatch","isFahrenheit","isSelectedDate","dateObj","year","getFullYear","dayNumber","monthIndex","getMonth","month","dayIndex","getDay","max","Math","round","min","unitSymbol","CardContainer","CardActionArea","disableTouchRipple","onClick","CardContentContainer","Typography","variant","IconContainer","src","icon","alt","main","TemperatureContainer","MaxTemperature","MinTemperature","styled","Card","CardContent","img","div","DailyWeatherList","currentIndex","dailyWeather","currentSwipeIndex","setCurrentSwipeIndex","Container","ContentWrapper","onScroll","currentTarget","scrollWidth","scrollLeft","elementWidth","length","currentScrollIndex","ceil","newScrollIndex","updateCurrentIndex","Content","screenWidth","map","toString","UnitCheckbox","selectedOption","setSelectedOption","FormControl","component","RadioGroup","row","value","onChange","target","handleOptionChange","FormControlLabel","control","Radio","color","label","format","d3","Rect","x","y","top","bottom","transform","hour","bandwidth","stroke","textAnchor","alignmentBaseline","fontSize","index","XAxis","left","scale","axis","useRef","current","call","ref","TemperatureBars","right","range","domain","padding","i","HourlyWeatherChart","hourlyWeather","getHours","WarningText","p","LoaderContainer","StyledCard","ActionsContainer","RightButtonContainer","span","LeftArrow","RightArrow","App","setCurrentIndex","isLoading","selectedDay","dailyWeatherLength","findIndex","CircularProgress","IconButton","prevState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","weatherReducer","GlobalStyle","createGlobalStyle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3388aef6.chunk.js","sourcesContent":["import * as React from \"react\"\n\nexport function Arrow(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      width={40}\n      height={40}\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        d=\"M12.293 5.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L16.586 13H5a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z\"\n        fill=\"#0D0D0D\"\n      />\n    </svg>\n  )\n}\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\"\nimport { AppDispatch, RootState } from \"./store\"\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","export const days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]\n","export const months = [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n]\n","import { FiveDaysForecastResponse, DailyForecastResponse } from \"./types\"\n\nconst APPID = \"75f972b80e26f14fe6c920aa6a85ad57\"\n\ninterface DailyForecastRequest {\n  lat: number\n  lon: number\n}\n\nexport async function fetchDailyForecast({ lat, lon }: DailyForecastRequest) {\n  const response = await fetch(\n    `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&appid=${APPID}&exclude=current,minutely,hourly,alerts&units=imperial`\n  )\n\n  const data: DailyForecastResponse = await response.json()\n\n  return data\n}\n\nexport async function fetchFiveDaysForecast() {\n  const response = await fetch(\n    `https://api.openweathermap.org/data/2.5/forecast?q=buenos+aires,ar&APPID=${APPID}&cnt=40&units=imperial`\n  )\n\n  const data: FiveDaysForecastResponse = await response.json()\n\n  return data\n}\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\"\nimport { api } from \"../api\"\nimport {\n  DailyForecastResponse,\n  FiveDaysForecastResponse,\n  DayItem,\n} from \"../api/types\"\n\ntype StateProps = {\n  loading: boolean\n  unit: \"celsius\" | \"fahrenheit\"\n  hourly: Pick<FiveDaysForecastResponse, \"list\">\n  daily: DailyForecastResponse\n  selectedDayDate: number | null\n  selectedDayHours: DayItem[]\n}\n\nexport const fetchWeather = createAsyncThunk(\"fetchWeather\", async () => {\n  const hourly = await api.fetchFiveDaysForecast()\n\n  const daily = await api.fetchDailyForecast(hourly.city.coord)\n\n  return { daily, hourly }\n})\n\nconst initialState: StateProps = {\n  loading: true,\n  unit: \"fahrenheit\",\n  hourly: {\n    list: [],\n  },\n  daily: {\n    daily: [],\n  },\n  selectedDayDate: null,\n  selectedDayHours: [],\n}\n\nconst weatherSlice = createSlice({\n  name: \"weather\",\n  initialState,\n  reducers: {\n    changeUnit(state, action) {\n      state.unit = action.payload\n    },\n    selectDay(state, action) {\n      const selectedDate = new Date(action.payload * 1000)\n\n      const foundDate = state.hourly.list.filter((day) => {\n        const listDate = new Date(day.dt * 1000)\n\n        return listDate.getDate() === selectedDate.getDate()\n      })\n\n      state.selectedDayHours = foundDate\n      state.selectedDayDate = action.payload\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchWeather.pending, (state, action) => {\n      state.loading = true\n    })\n    builder.addCase(fetchWeather.fulfilled, (state, action) => {\n      const firstDay = new Date(action.payload.daily.daily[1].dt * 1000)\n\n      const HoursFirstDay = action.payload.hourly.list.filter((day) => {\n        const listDate = new Date(day.dt * 1000)\n        return listDate.getDate() === firstDay.getDate()\n      })\n\n      state.loading = false\n      state.hourly.list = action.payload.hourly.list\n      state.daily.daily = action.payload.daily.daily\n      state.selectedDayDate = action.payload.daily.daily[1].dt\n      state.selectedDayHours = HoursFirstDay\n    })\n    builder.addCase(fetchWeather.rejected, (state, action) => {\n      state.loading = false\n    })\n  },\n})\n\nexport const { changeUnit, selectDay } = weatherSlice.actions\n\nexport default weatherSlice.reducer\n","export function fahrenheitToCelsius(fahrenheit: number) {\n  return (fahrenheit - 32) * (5 / 9)\n}\n","import { useState, useEffect } from \"react\"\n\nexport const BREAKPOINTS = {\n  DESKTOP_MIN: 1024,\n} as const\n\nexport const mediaQuery = {\n  desktop: `@media (min-width: ${BREAKPOINTS.DESKTOP_MIN}px)`,\n} as const\n\nconst mediaQueryJS = window.matchMedia(\n  `(min-width: ${BREAKPOINTS.DESKTOP_MIN}px)`\n)\n\nexport function useMediaQuery() {\n  const [isMobile, setIsMobile] = useState(!mediaQueryJS.matches)\n  const [screenSize, setScreenSize] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight,\n  })\n\n  useEffect(() => {\n    function handleChange(e: MediaQueryListEvent) {\n      setIsMobile(!e.matches)\n      setScreenSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      })\n    }\n\n    mediaQueryJS.addEventListener(\"change\", handleChange)\n\n    return () => {\n      mediaQueryJS.removeEventListener(\"change\", handleChange)\n    }\n  }, [])\n\n  return { isMobile, screenSize }\n}\n","import Card from \"@material-ui/core/Card\"\nimport CardContent from \"@material-ui/core/CardContent\"\nimport CardActionArea from \"@material-ui/core/CardActionArea\"\nimport Typography from \"@material-ui/core/Typography\"\nimport styled from \"styled-components\"\nimport { WeatherItem } from \"../../api/types\"\nimport { days, months } from \"../../constants\"\nimport { useAppSelector, useAppDispatch } from \"../../hooks\"\nimport { selectDay } from \"../../features/weatherSlice\"\nimport { fahrenheitToCelsius } from \"../../utils\"\nimport { mediaQuery } from \"../../mediaQuery\"\n\ninterface WeatherCardProps {\n  date: number\n  temp: {\n    min: number\n    max: number\n  }\n  weather: WeatherItem\n}\n\nexport function WeatherCard({ temp, date, weather }: WeatherCardProps) {\n  const unit = useAppSelector((state) => state.weather.unit)\n  const selected = useAppSelector((state) => state.weather.selectedDayDate)\n  const dispatch = useAppDispatch()\n\n  const isFahrenheit = unit === \"fahrenheit\"\n  const isSelectedDate = selected === date\n\n  const dateObj = new Date(date * 1000)\n  const year = dateObj.getFullYear()\n  const dayNumber = dateObj.getDate()\n  const monthIndex = dateObj.getMonth()\n  const month = months[monthIndex]\n  const dayIndex = dateObj.getDay()\n  const day = days[dayIndex]\n\n  const max = Math.round(\n    isFahrenheit ? temp.max : fahrenheitToCelsius(temp.max)\n  )\n  const min = Math.round(\n    isFahrenheit ? temp.min : fahrenheitToCelsius(temp.min)\n  )\n\n  const unitSymbol = isFahrenheit ? \"°F\" : \"°C\"\n\n  function handleClick() {\n    dispatch(selectDay(date))\n  }\n\n  return (\n    <CardContainer selected={isSelectedDate}>\n      <CardActionArea disableTouchRipple onClick={handleClick}>\n        <CardContentContainer>\n          <div>\n            <Typography variant=\"h5\">{day}</Typography>\n            <Typography variant=\"subtitle1\">\n              {`${dayNumber} ${month} ${year}`}\n            </Typography>\n          </div>\n          <IconContainer\n            src={`http://openweathermap.org/img/wn/${weather.icon}@2x.png`}\n            alt={weather.main}\n          />\n\n          <TemperatureContainer>\n            <MaxTemperature variant=\"h6\">{`${max}${unitSymbol}`}</MaxTemperature>\n            <MinTemperature variant=\"h6\">{`${min}${unitSymbol}`}</MinTemperature>\n          </TemperatureContainer>\n        </CardContentContainer>\n      </CardActionArea>\n    </CardContainer>\n  )\n}\n\ninterface CardContainerProps {\n  selected: boolean\n}\n\nconst CardContainer = styled(Card)<CardContainerProps>`\n  width: 14rem;\n  text-align: center;\n  margin: auto;\n  background-color: ${(props) => (props.selected ? \"#f8f9fa!important\" : null)};\n\n  ${mediaQuery.desktop} {\n    margin: inherit;\n  }\n`\n\nconst CardContentContainer = styled(CardContent)`\n  display: grid;\n  grid-gap: 1rem;\n  justify-content: center;\n`\n\nconst IconContainer = styled.img`\n  align-self: center;\n  height: 8rem;\n`\nconst TemperatureContainer = styled.div`\n  display: grid;\n  grid-gap: 1rem;\n  grid-template-columns: 1fr 1fr;\n`\n\nconst MaxTemperature = styled(Typography)`\n  color: red;\n`\n\nconst MinTemperature = styled(Typography)`\n  color: blue;\n`\n","import { useState, useEffect } from \"react\"\nimport styled from \"styled-components\"\nimport { WeatherCard } from \"../../components/WeatherCard\"\nimport { useAppSelector, useAppDispatch } from \"../../hooks\"\nimport { selectDay } from \"../../features/weatherSlice\"\nimport { mediaQuery, useMediaQuery } from \"../../mediaQuery\"\n\ninterface DailyWeatherListProps {\n  currentIndex: number\n}\n\nexport function DailyWeatherList({ currentIndex }: DailyWeatherListProps) {\n  const dailyWeather = useAppSelector((state) => state.weather.daily)\n  const dispatch = useAppDispatch()\n  const { screenSize } = useMediaQuery()\n  const [currentSwipeIndex, setCurrentSwipeIndex] = useState(1)\n\n  useEffect(() => {\n    dispatch(selectDay(dailyWeather.daily[currentSwipeIndex - 1].dt))\n  }, [currentSwipeIndex, dispatch, dailyWeather.daily])\n\n  function handleScroll(e: React.UIEvent<HTMLElement>) {\n    const { scrollWidth, scrollLeft } = e.currentTarget\n\n    updateCurrentIndex({ scrollWidth, scrollLeft })\n  }\n\n  function updateCurrentIndex({\n    scrollWidth,\n    scrollLeft,\n  }: {\n    scrollWidth: number\n    scrollLeft: number\n  }) {\n    const elementWidth = scrollWidth / dailyWeather.daily.length\n    const currentScrollIndex = Math.ceil(scrollLeft / elementWidth)\n    const scrollPositionAtCurrentElement =\n      1 + (scrollLeft - elementWidth * currentScrollIndex) / elementWidth\n\n    const newScrollIndex =\n      scrollPositionAtCurrentElement > 0.5\n        ? currentScrollIndex + 1\n        : currentScrollIndex\n\n    if (newScrollIndex !== currentSwipeIndex) {\n      setCurrentSwipeIndex(newScrollIndex)\n    }\n  }\n\n  return (\n    <Container>\n      <ContentWrapper onScroll={handleScroll}>\n        <Content currentIndex={currentIndex} screenWidth={screenSize.width}>\n          {dailyWeather.daily.map((day) => (\n            <CardContainer key={day.dt.toString()}>\n              <WeatherCard\n                temp={day.temp}\n                date={day.dt}\n                weather={day.weather[0]}\n              />\n            </CardContainer>\n          ))}\n        </Content>\n      </ContentWrapper>\n    </Container>\n  )\n}\n\nconst Container = styled.div``\n\nconst ContentWrapper = styled.div`\n  overflow-y: hidden;\n  padding: 2rem;\n  width: 100%;\n  height: 100%;\n  scroll-snap-type: x mandatory;\n\n  -ms-overflow-style: none;\n  ::-webkit-scrollbar {\n    display: none;\n  }\n\n  ${mediaQuery.desktop} {\n    overflow: hidden;\n  }\n`\n\ninterface ContentProps {\n  currentIndex: number\n  screenWidth: number\n}\n\nconst Content = styled.div<ContentProps>`\n  display: grid;\n  grid-auto-columns: ${(props) => `calc(${props.screenWidth}px - 12rem)`};\n  grid-auto-flow: column;\n  scroll-snap-align: center;\n\n  ${mediaQuery.desktop} {\n    display: flex;\n    transition: all 250ms linear;\n    transform: ${(props) =>\n      `translateX(-${\n        props.currentIndex > 2 ? (props.currentIndex - 2) * (100 / 3) : 0\n      }%)`};\n\n    > * {\n      flex-shrink: 0;\n      flex-grow: 1;\n      width: calc(100% / 3);\n    }\n  }\n`\nconst CardContainer = styled.div`\n  width: 100%;\n  text-align: center;\n  scroll-snap-align: center;\n\n  ${mediaQuery.desktop} {\n    width: calc(100% / 3);\n    display: flex;\n    justify-content: center;\n  }\n`\n","import { useState } from \"react\"\nimport styled from \"styled-components\"\nimport Radio from \"@material-ui/core/Radio\"\nimport RadioGroup from \"@material-ui/core/RadioGroup\"\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\"\nimport FormControl from \"@material-ui/core/FormControl\"\nimport Typography from \"@material-ui/core/Typography\"\nimport { useAppDispatch } from \"../../hooks\"\nimport { changeUnit } from \"../weatherSlice\"\n\nexport function UnitCheckbox() {\n  const dispatch = useAppDispatch()\n  const [selectedOption, setSelectedOption] = useState(\"fahrenheit\")\n\n  function handleOptionChange(\n    e: import(\"react\").ChangeEvent<HTMLInputElement>\n  ) {\n    setSelectedOption(e.target.value)\n    dispatch(changeUnit(e.target.value))\n  }\n\n  return (\n    <Container>\n      <FormControl component=\"fieldset\">\n        <RadioGroup\n          row={true}\n          name=\"unit\"\n          value={selectedOption}\n          onChange={(e) => handleOptionChange(e)}\n        >\n          <FormControlLabel\n            value=\"celsius\"\n            control={<Radio color=\"primary\" />}\n            label={<Typography variant=\"h6\">Celsius</Typography>}\n          />\n          <FormControlLabel\n            value=\"fahrenheit\"\n            control={<Radio color=\"primary\" />}\n            label={<Typography variant=\"h6\">Fahrenheit</Typography>}\n          />\n        </RadioGroup>\n      </FormControl>\n    </Container>\n  )\n}\n\nconst Container = styled.div`\n  text-align: center;\n`\n","import { TemperatureData } from \"./TemperatureBars\"\nimport * as d3 from \"d3\"\n\ninterface RectProps {\n  data: TemperatureData\n  x: d3.ScaleBand<string>\n  y: d3.ScaleLinear<number, number, never>\n  height: number\n  top: number\n  bottom: number\n}\n\nconst format = d3.format(\".2\")\n\nexport function Rect({ data, x, y, height, top, bottom }: RectProps) {\n  return (\n    <g\n      key={data.index}\n      transform={`translate(${x(data.hour.toString())}, ${y(data.value)})`}\n    >\n      <rect\n        width={x.bandwidth()}\n        height={height - bottom - top - y(data.value)}\n        fill={\"#FEF5D7\"}\n        stroke=\"#FFCC00\"\n      />\n      <text\n        transform={`translate(${x.bandwidth() / 2}, ${-6})`}\n        textAnchor=\"middle\"\n        alignmentBaseline=\"middle\"\n        fill=\"grey\"\n        fontSize=\"12\"\n      >\n        {format(data.value)}\n      </text>\n    </g>\n  )\n}\n","import { useEffect, useRef } from \"react\"\nimport * as d3 from \"d3\"\n\ninterface XAxisProps {\n  bottom: number\n  left: number\n  height: number\n  scale: d3.ScaleBand<string>\n}\n\nexport function XAxis({ bottom, left, height, scale }: XAxisProps) {\n  const axis = useRef(null)\n\n  useEffect(() => {\n    d3.select(axis.current).call(d3.axisBottom(scale) as any)\n  })\n\n  return (\n    <g ref={axis} transform={`translate(${left}, ${height - bottom + 4})`} />\n  )\n}\n","import { Fragment } from \"react\"\nimport * as d3 from \"d3\"\nimport { Rect } from \"./Rect\"\nimport { XAxis } from \"./XAxis\"\nimport { useMediaQuery } from \"../../mediaQuery\"\n\nexport interface TemperatureData {\n  index: number\n  hour: number\n  value: number\n}\n\ninterface TemperatureBarsProps {\n  data: TemperatureData[]\n  width: number\n  height: number\n  top: number\n  bottom: number\n  left: number\n  right: number\n}\n\nexport function TemperatureBars({\n  data,\n  width,\n  height,\n  top,\n  bottom,\n  left,\n  right,\n}: TemperatureBarsProps) {\n  const { isMobile } = useMediaQuery()\n  const x = d3\n    .scaleBand()\n    .range([0, width - left - right])\n    .domain(data.map((d) => d.hour.toString())) // TODO remove toString()\n    .padding(isMobile ? 0.2 : 0.4)\n\n  const y = d3\n    .scaleLinear()\n    .range([height - top - bottom, 0])\n    .domain([0, d3.max(data, (d) => d.value) as number])\n\n  return (\n    <Fragment>\n      <svg width={width} height={height}>\n        <XAxis bottom={bottom} height={height} left={left} scale={x} />\n        <g transform={`translate(${left}, ${top})`}>\n          {data.map((d, i) => (\n            <Rect\n              key={d.hour}\n              data={d}\n              x={x}\n              y={y}\n              height={height}\n              top={top}\n              bottom={bottom}\n            />\n          ))}\n        </g>\n      </svg>\n    </Fragment>\n  )\n}\n","import styled from \"styled-components\"\nimport { TemperatureBars } from \"../../components/TemperatureBars\"\nimport { useAppSelector } from \"../../hooks\"\nimport { DayItem } from \"../../api/types\"\nimport { fahrenheitToCelsius } from \"../../utils\"\nimport { mediaQuery, useMediaQuery } from \"../../mediaQuery\"\n\ninterface HourlyWeatherProps {\n  hourlyWeather: DayItem[]\n}\n\nexport function HourlyWeatherChart({ hourlyWeather }: HourlyWeatherProps) {\n  const { isMobile, screenSize } = useMediaQuery()\n  const unit = useAppSelector((state) => state.weather.unit)\n\n  const data = hourlyWeather.map((hour, index) => {\n    return {\n      index,\n      hour: new Date(hour.dt * 1000).getHours(),\n      value: Math.round(\n        unit === \"fahrenheit\"\n          ? Math.round(hour.main.temp)\n          : Math.round(fahrenheitToCelsius(hour.main.temp))\n      ),\n    }\n  })\n\n  return (\n    <Container>\n      {data != null && data.length > 0 ? (\n        <TemperatureBars\n          data={data}\n          width={isMobile ? screenSize.width - 80 : 500}\n          height={isMobile ? 200 : 250}\n          top={20}\n          bottom={30}\n          left={isMobile ? 0 : 30}\n          right={0}\n        />\n      ) : (\n        <WarningText>No information for selected day</WarningText>\n      )}\n    </Container>\n  )\n}\n\nconst Container = styled.div`\n  text-align: center;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n\n  ${mediaQuery.desktop} {\n    padding: 4rem;\n    display: block;\n  }\n`\nconst WarningText = styled.p`\n  font-size: 1.6rem;\n`\n","import { useEffect, useState } from \"react\"\nimport styled from \"styled-components\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport CircularProgress from \"@material-ui/core/CircularProgress\"\nimport Card from \"@material-ui/core/Card\"\nimport { Arrow as RightArrow } from \"./icons\"\nimport { useAppSelector, useAppDispatch } from \"./hooks\"\nimport { DailyWeatherList } from \"./features/DailyWeatherList\"\nimport { fetchWeather, selectDay } from \"./features/weatherSlice\"\nimport { UnitCheckbox } from \"./features/UnitCheckbox\"\nimport { HourlyWeatherChart } from \"./features/HourlyWeatherChart\"\nimport { mediaQuery, useMediaQuery } from \"./mediaQuery\"\n\nfunction App() {\n  const [currentIndex, setCurrentIndex] = useState(1)\n  const dispatch = useAppDispatch()\n  const dailyWeather = useAppSelector((state) => state.weather.daily.daily)\n  const isLoading = useAppSelector((state) => state.weather.loading)\n  const selectedDay = useAppSelector((state) => state.weather.selectedDayDate)\n  const hourlyWeather = useAppSelector(\n    (state) => state.weather.selectedDayHours\n  )\n\n  const { isMobile } = useMediaQuery()\n\n  const dailyWeatherLength = dailyWeather.length\n\n  useEffect(() => {\n    dispatch(fetchWeather())\n  }, [dispatch])\n\n  useEffect(() => {\n    const day = dailyWeather.findIndex((day) => {\n      return day.dt === selectedDay\n    })\n\n    setCurrentIndex(day)\n  }, [dailyWeather, selectedDay])\n\n  function handleNext() {\n    dispatch(selectDay(dailyWeather[currentIndex + 1].dt))\n    setCurrentIndex((prevState) => prevState + 1)\n  }\n\n  function handlePrev() {\n    dispatch(selectDay(dailyWeather[currentIndex - 1].dt))\n    setCurrentIndex((prevState) => prevState - 1)\n  }\n\n  return isLoading ? (\n    <LoaderContainer>\n      <CircularProgress />\n    </LoaderContainer>\n  ) : (\n    <Container>\n      <StyledCard>\n        <UnitCheckbox />\n        {!isMobile && (\n          <ActionsContainer>\n            {currentIndex > 0 && (\n              <span>\n                <IconButton onClick={handlePrev}>\n                  <LeftArrow />\n                </IconButton>\n              </span>\n            )}\n            {currentIndex < dailyWeatherLength - 1 && (\n              <RightButtonContainer>\n                <IconButton onClick={handleNext}>\n                  <RightArrow />\n                </IconButton>\n              </RightButtonContainer>\n            )}\n          </ActionsContainer>\n        )}\n        <DailyWeatherList currentIndex={currentIndex} />\n        <HourlyWeatherChart hourlyWeather={hourlyWeather} />\n      </StyledCard>\n    </Container>\n  )\n}\n\nconst LoaderContainer = styled.div`\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst Container = styled.div`\n  height: 100vh;\n\n  ${mediaQuery.desktop} {\n    width: 72rem;\n    display: flex;\n    align-items: center;\n    margin: auto;\n  }\n`\n\nconst StyledCard = styled(Card)`\n  padding: 4rem;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n\n  ${mediaQuery.desktop} {\n    display: block;\n    height: 68rem;\n  }\n`\n\nconst ActionsContainer = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n`\n\nconst RightButtonContainer = styled.span`\n  justify-self: flex-end;\n  grid-column: 2;\n`\n\nconst LeftArrow = styled(RightArrow)`\n  transform: rotate(180deg);\n`\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\"\nimport weatherReducer from \"./features/weatherSlice\"\n\nexport const store = configureStore({\n  reducer: {\n    weather: weatherReducer,\n  },\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport { createGlobalStyle } from \"styled-components\"\nimport { Provider } from \"react-redux\"\nimport { store } from \"./store\"\n\nconst GlobalStyle = createGlobalStyle`\n  :root {\n    box-sizing: border-box;\n    font-size: 10px;\n  };\n\n  body {\n    margin: 0;\n  }\n\n  *, ::before, ::after {\n    box-sizing: inherit\n  }\n`\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <GlobalStyle />\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}